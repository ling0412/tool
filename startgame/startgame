#!/usr/bin/env python3
import sys
import os
import subprocess
import json
from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, 
    QLabel, QLineEdit, QComboBox, QPushButton, QMessageBox, QCheckBox, QGridLayout, QGroupBox
)
from PySide6.QtCore import Qt, QTimer

# --- 1. UMU/Proton 版本配置 (对应 PROTONPATH 参数) ---
# 这些值将作为 PROTONPATH 环境变量的值
PROTON_PATHS = {
    "GE-Proton": "GE-Proton",  
    "UMU-Proton": "UMU-Proton",
    "自定义": "", # 选择“自定义”时，使用 custom_proton_path_input 的值
}

# --- 2. WINEPREFIX 路径预设 ---
HOME_DIR = os.path.expanduser("~")
DEFAULT_GLOBAL_PFX = os.path.join(HOME_DIR, ".local", "share", "proton-pfx", "0")

# --- 3. 配置保存/加载文件名 ---
CONFIG_DIR_NAME = "startgame"
CONFIG_FILE_NAME = "config.json"
LOCAL_PFX_DIR_NAME = "proton/pfx" # 启动目录下的 WINEPREFIX 相对路径

class CustomLauncher(QWidget):
    def __init__(self, exe_path):
        super().__init__()
        self.exe_path = exe_path
        self.game_dir = os.path.dirname(exe_path)
        self.config_path = os.path.join(self.game_dir, CONFIG_DIR_NAME, CONFIG_FILE_NAME)
        
        self.setWindowTitle(f"Umu 启动器: {os.path.basename(exe_path)}")
        self.setMinimumWidth(800)
        
        # 1. 初始化所有UI组件
        self.init_ui() 
        
        # 2. 绑定事件 (在设置初始状态之前绑定)
        self.bind_events()
        
        # 3. 加载并设置初始状态
        self.load_config()
        
        # 4. 初始化互斥和依赖开关的状态
        self.handle_proton_path_switch(self.proton_combo.currentText()) 
        self.handle_proton_fsr_switch(self.proton_fsr_checkbox.isChecked())
        self.handle_gamescope_switch(self.gamescope_checkbox.isChecked())
        self.update_command_preview()

    def init_ui(self):
        main_layout = QVBoxLayout()

        # --- Umu/Proton 路径配置组 ---
        top_group = QGroupBox("Umu/Proton 路径与环境配置")
        top_layout = QGridLayout(top_group)

        # 1. PROTONPATH 选择 (GE-Proton, UMU-Proton, 自定义)
        proton_path_label = QLabel("PROTONPATH 预设值:")
        self.proton_combo = QComboBox()
        self.proton_combo.addItems(PROTON_PATHS.keys())
        self.proton_combo.setCurrentText("GE-Proton") 
        top_layout.addWidget(proton_path_label, 0, 0)
        top_layout.addWidget(self.proton_combo, 0, 1)

        # 2. 自定义 PROTONPATH 输入框
        custom_proton_path_label = QLabel("自定义 PROTONPATH:")
        self.custom_proton_path_input = QLineEdit("")
        self.custom_proton_path_input.setPlaceholderText("例如: /path/to/my/Proton-8.0-3")
        self.custom_proton_path_input.setEnabled(False) 
        top_layout.addWidget(custom_proton_path_label, 1, 0)
        top_layout.addWidget(self.custom_proton_path_input, 1, 1)
        
        # 3. WINEPREFIX 路径选择
        self.wine_pfx_checkbox = QCheckBox(f"使用启动目录 ./{CONFIG_DIR_NAME}/{LOCAL_PFX_DIR_NAME}")
        self.wine_pfx_checkbox.setChecked(False) 
        top_layout.addWidget(QLabel(f"WINEPREFIX: 默认路径 {DEFAULT_GLOBAL_PFX}"), 2, 0)
        top_layout.addWidget(self.wine_pfx_checkbox, 2, 1)

        main_layout.addWidget(top_group)
        
        # --- 环境变量和参数配置组 ---
        env_group = QGroupBox("启动参数")
        env_layout = QVBoxLayout(env_group)
        
        # 额外环境变量输入
        env_input_layout = QHBoxLayout()
        env_label = QLabel("额外环境变量:")
        self.env_input = QLineEdit("") 
        env_input_layout.addWidget(env_label)
        env_input_layout.addWidget(self.env_input)
        env_layout.addLayout(env_input_layout)
        
        # 游戏参数输入
        args_input_layout = QHBoxLayout()
        args_label = QLabel("游戏参数 (在 .exe 后):")
        self.args_input = QLineEdit("") 
        args_input_layout.addWidget(args_label)
        args_input_layout.addWidget(self.args_input)
        env_layout.addLayout(args_input_layout)
        
        # --- UMU 专用参数 (GAMEID, STORE, pf_tricks) ---
        umu_params_group = QGroupBox("Umu 专用参数")
        umu_params_layout = QGridLayout(umu_params_group)
        
        # GAMEID (默认值修改为 0)
        gameid_label = QLabel("GAMEID (默认 0):")
        self.gameid_input = QLineEdit("0")
        self.gameid_input.setPlaceholderText("umu-id")
        
        store_label = QLabel("STORE:")
        self.store_input = QLineEdit("")
        self.store_input.setPlaceholderText("例如: gog / egs / itchio")
        
        # 新增 -pf_tricks 输入框
        # 提示修改为：将被放置在命令末尾
        pf_trick_label = QLabel("-pf_tricks (逗号分隔, 例: x,y, 将被放置在命令末尾):")
        self.pf_tricks_input = QLineEdit("")
        self.pf_tricks_input.setPlaceholderText("如: d3dcompiler_47, mf")

        umu_params_layout.addWidget(gameid_label, 0, 0)
        umu_params_layout.addWidget(self.gameid_input, 0, 1)
        umu_params_layout.addWidget(store_label, 1, 0)
        umu_params_layout.addWidget(self.store_input, 1, 1)
        umu_params_layout.addWidget(pf_trick_label, 2, 0) # 新增
        umu_params_layout.addWidget(self.pf_tricks_input, 2, 1) # 新增
        
        env_layout.addWidget(umu_params_group)
        
        # --- 快速开关复选框 (Proton 专用) ---
        quick_config_group = QGroupBox("快速开关")
        quick_config_layout = QGridLayout(quick_config_group)
        
        self.mangohud_checkbox = QCheckBox("启用 MangoHud/MangoApp (MANGOHUD=1)")
        self.mangohud_checkbox.setChecked(True) 
        quick_config_layout.addWidget(self.mangohud_checkbox, 0, 0)

        self.gamemode_checkbox = QCheckBox("启用 gamemoderun")
        quick_config_layout.addWidget(self.gamemode_checkbox, 0, 1)

        self.winedll_checkbox = QCheckBox('WINEDLLOVERRIDES="winhttp=n,b"')
        self.winedll_checkbox.setChecked(False) 
        quick_config_layout.addWidget(self.winedll_checkbox, 0, 2)

        self.proton_wayland_checkbox = QCheckBox("启用实验性Wayland驱动")
        self.proton_wayland_checkbox.setChecked(False)
        quick_config_layout.addWidget(self.proton_wayland_checkbox, 1, 0)

        self.proton_hdr_checkbox = QCheckBox("PROTON_ENABLE_HDR=1")
        self.proton_hdr_checkbox.setChecked(False)
        quick_config_layout.addWidget(self.proton_hdr_checkbox, 1, 1)
        
        # 新增 PROTON_VERB=runinprefix 选项
        self.proton_verb_checkbox = QCheckBox("PROTON_VERB=runinprefix")
        self.proton_verb_checkbox.setChecked(False)
        quick_config_layout.addWidget(self.proton_verb_checkbox, 1, 2)
        
        env_layout.addWidget(quick_config_group)
        main_layout.addWidget(env_group)
        
        # --- 缩放配置组 (Gamescope 和 Proton FSR 互斥) ---
        scaling_group = QGroupBox("缩放与窗口配置 (Gamescope/Proton FSR 互斥)")
        scaling_layout = QVBoxLayout(scaling_group)

        # 1. Gamescope 配置
        self.gamescope_group = QGroupBox("Gamescope 配置")
        gamescope_layout = QGridLayout(self.gamescope_group)
        
        gs_header_layout = QHBoxLayout()
        self.gamescope_checkbox = QCheckBox("启用 gamescope 启动器")
        self.gamescope_checkbox.setChecked(False)
        gs_header_layout.addWidget(self.gamescope_checkbox)
        
        self.gs_collapse_btn = QPushButton("▼ 展开配置")
        self.gs_collapse_btn.setMaximumWidth(120)
        gs_header_layout.addWidget(self.gs_collapse_btn)
        gs_header_layout.addStretch()
        
        gamescope_layout.addLayout(gs_header_layout, 0, 0, 1, 4)
        
        self.gs_config_widget = QWidget()
        gs_config_layout = QGridLayout(self.gs_config_widget)
        gs_config_layout.setContentsMargins(20, 0, 0, 0)
        
        res_label = QLabel("目标分辨率 (w x h) / 输出分辨率 (W x H):")
        self.w_input = QLineEdit("1920")
        self.h_input = QLineEdit("1080")
        self.W_input = QLineEdit("3840") 
        self.H_input = QLineEdit("2160") 
        
        res_row_layout = QHBoxLayout()
        res_row_layout.addWidget(QLabel("-w"))
        res_row_layout.addWidget(self.w_input)
        res_row_layout.addWidget(QLabel("-h"))
        res_row_layout.addWidget(self.h_input)
        res_row_layout.addWidget(QLabel("-W"))
        res_row_layout.addWidget(self.W_input)
        res_row_layout.addWidget(QLabel("-H"))
        res_row_layout.addWidget(self.H_input)
        
        gs_config_layout.addWidget(res_label, 0, 0, 1, 4)
        gs_config_layout.addLayout(res_row_layout, 1, 0, 1, 4)

        self.fsr_checkbox = QCheckBox("启用 Gamescope FSR 1.0 (-F fsr)")
        gs_config_layout.addWidget(self.fsr_checkbox, 2, 0, 1, 2)
        
        gamescope_layout.addWidget(self.gs_config_widget, 1, 0, 1, 4)
        self.gs_config_widget.setVisible(False)
        scaling_layout.addWidget(self.gamescope_group)


        # 2. Proton FSR 配置 
        proton_fsr_group = QGroupBox("Proton FSR (WINE_FULLSCREEN_FSR)")
        proton_fsr_layout = QGridLayout(proton_fsr_group)
        
        self.proton_fsr_checkbox = QCheckBox("启用 Proton FSR 缩放 (WINE_FULLSCREEN_FSR=1)")
        self.proton_fsr_checkbox.setChecked(False)
        proton_fsr_layout.addWidget(self.proton_fsr_checkbox, 0, 0, 1, 4)
        
        fsr_sharp_label = QLabel("FSR 锐化强度 (0-5, 0最锐利):")
        self.fsr_sharpness_input = QLineEdit("2")
        self.fsr_sharpness_input.setMaximumWidth(100)
        
        fsr_sharp_layout = QHBoxLayout()
        fsr_sharp_layout.addWidget(fsr_sharp_label)
        fsr_sharp_layout.addWidget(self.fsr_sharpness_input)
        fsr_sharp_layout.addStretch()
        proton_fsr_layout.addLayout(fsr_sharp_layout, 1, 0, 1, 4)
        
        self.proton_fake_res_checkbox = QCheckBox("启用 Proton 伪当前分辨率 (WINE_FULLSCREEN_FSR_CUSTOM_MODE)")
        self.proton_fake_res_checkbox.setChecked(False)
        self.proton_fake_res_checkbox.setEnabled(False) 
        proton_fsr_layout.addWidget(self.proton_fake_res_checkbox, 2, 0, 1, 4)
        
        fake_res_label = QLabel("伪分辨率 (WxH):")
        self.fake_w_input = QLineEdit("2560")
        self.fake_h_input = QLineEdit("1440")
        self.fake_w_input.setMaximumWidth(100)
        self.fake_h_input.setMaximumWidth(100)
        
        fake_res_layout = QHBoxLayout()
        fake_res_layout.addWidget(fake_res_label)
        fake_res_layout.addWidget(self.fake_w_input)
        fake_res_layout.addWidget(QLabel("x"))
        fake_res_layout.addWidget(self.fake_h_input)
        fake_res_layout.addStretch()
        
        self.fake_w_input.setEnabled(False) 
        self.fake_h_input.setEnabled(False) 
        proton_fsr_layout.addLayout(fake_res_layout, 3, 0, 1, 4)

        scaling_layout.addWidget(proton_fsr_group)
        main_layout.addWidget(scaling_group)

        # --- 命令预览 (灰色文字) ---
        launch_button = QPushButton("使用 foot 启动游戏")
        launch_button.clicked.connect(self.launch_game)
        
        self.preview_label = QLabel("最终运行命令:")
        self.preview_label.setStyleSheet("color: grey; font-size: 10pt;")
        
        main_layout.addWidget(self.preview_label)
        main_layout.addWidget(launch_button)

        self.setLayout(main_layout)

    def bind_events(self):
        # 监听所有输入变化以更新预览
        # Proton 路径切换和 WINEPREFIX 路径选择
        self.proton_combo.currentTextChanged.connect(self.handle_proton_path_switch)
        self.custom_proton_path_input.textChanged.connect(self.update_command_preview)
        self.wine_pfx_checkbox.stateChanged.connect(self.update_command_preview) 

        # Umu 专用参数
        self.gameid_input.textChanged.connect(self.update_command_preview)
        self.store_input.textChanged.connect(self.update_command_preview)
        self.pf_tricks_input.textChanged.connect(self.update_command_preview) # 新增 pf_tricks 监听
        
        # 快速开关
        self.gamemode_checkbox.stateChanged.connect(self.update_command_preview)
        self.mangohud_checkbox.stateChanged.connect(self.update_command_preview)
        self.winedll_checkbox.stateChanged.connect(self.update_command_preview)
        self.proton_hdr_checkbox.stateChanged.connect(self.update_command_preview)
        self.proton_wayland_checkbox.stateChanged.connect(self.update_command_preview)
        self.proton_verb_checkbox.stateChanged.connect(self.update_command_preview) # 新增 PROTON_VERB 监听
        
        # Gamescope
        self.gamescope_checkbox.toggled.connect(self.handle_gamescope_switch)
        self.gs_collapse_btn.clicked.connect(self.toggle_gamescope_config)
        self.fsr_checkbox.stateChanged.connect(self.update_command_preview)
        self.w_input.textChanged.connect(self.update_command_preview)
        self.h_input.textChanged.connect(self.update_command_preview)
        self.W_input.textChanged.connect(self.update_command_preview)
        self.H_input.textChanged.connect(self.update_command_preview)
        
        # Proton FSR
        self.proton_fsr_checkbox.toggled.connect(self.handle_proton_fsr_switch)
        self.fsr_sharpness_input.textChanged.connect(self.update_command_preview)
        
        # Proton 伪分辨率
        self.proton_fake_res_checkbox.toggled.connect(self.handle_proton_fake_res_switch)
        self.fake_w_input.textChanged.connect(self.update_command_preview)
        self.fake_h_input.textChanged.connect(self.update_command_preview)
        
        # 额外输入框
        self.env_input.textChanged.connect(self.update_command_preview)
        self.args_input.textChanged.connect(self.update_command_preview)

    def handle_proton_path_switch(self, selected_name):
        """处理 PROTONPATH 切换，控制自定义输入框的启用/禁用"""
        is_custom = selected_name == "自定义"
        self.custom_proton_path_input.setEnabled(is_custom)
        self.update_command_preview()

    # Gamescope, Proton FSR 和 伪分辨率的互斥逻辑与 V2 保持一致，以保持代码简洁
    def handle_gamescope_switch(self, checked):
        """处理 Gamescope 切换时的状态和与 Proton FSR 组的互斥。"""
        self.proton_fsr_checkbox.setEnabled(not checked)
        
        if checked:
            self.proton_fsr_checkbox.setChecked(False)
            self.proton_fake_res_checkbox.setChecked(False)
            self.fsr_sharpness_input.setEnabled(False)
            self.proton_fake_res_checkbox.setEnabled(False)
            self.fake_w_input.setEnabled(False)
            self.fake_h_input.setEnabled(False)
            
            if not self.gs_config_widget.isVisible():
                self.gs_config_widget.setVisible(True)
                self.gs_collapse_btn.setText("▲ 收起配置")
        else:
            is_fsr_checked = self.proton_fsr_checkbox.isChecked()
            self.fsr_sharpness_input.setEnabled(is_fsr_checked)
            self.proton_fake_res_checkbox.setEnabled(is_fsr_checked)
            self.fake_w_input.setEnabled(is_fsr_checked and self.proton_fake_res_checkbox.isChecked())
            self.fake_h_input.setEnabled(is_fsr_checked and self.proton_fake_res_checkbox.isChecked())
            
            if self.gs_config_widget.isVisible():
                self.gs_config_widget.setVisible(False)
                self.gs_collapse_btn.setText("▼ 展开配置")
        
        self.w_input.setEnabled(checked)
        self.h_input.setEnabled(checked)
        self.W_input.setEnabled(checked)
        self.H_input.setEnabled(checked)
        self.fsr_checkbox.setEnabled(checked)

        self.update_command_preview()

    def handle_proton_fsr_switch(self, checked):
        """处理 Proton FSR 切换时的状态，控制 Proton 伪分辨率的启用，并处理与 Gamescope 的互斥。"""
        self.fsr_sharpness_input.setEnabled(checked)
        self.proton_fake_res_checkbox.setEnabled(checked)
        
        if not checked:
            self.proton_fake_res_checkbox.setChecked(False)
            self.fake_w_input.setEnabled(False)
            self.fake_h_input.setEnabled(False)
        else:
            is_fake_res_checked = self.proton_fake_res_checkbox.isChecked()
            self.fake_w_input.setEnabled(is_fake_res_checked)
            self.fake_h_input.setEnabled(is_fake_res_checked)
        
        is_any_scaling_enabled = checked
        self.gamescope_checkbox.setEnabled(not is_any_scaling_enabled)
        self.gamescope_group.setEnabled(not is_any_scaling_enabled) 
        
        if is_any_scaling_enabled:
            self.gamescope_checkbox.setChecked(False)
        
        self.update_command_preview()

    def handle_proton_fake_res_switch(self, checked):
        """处理 Proton 伪分辨率切换时的子控件状态和与 Gamescope 的互斥。"""
        self.fake_w_input.setEnabled(checked)
        self.fake_h_input.setEnabled(checked)
        
        is_fsr_enabled = self.proton_fsr_checkbox.isChecked()
        is_gamescope_allowed = not is_fsr_enabled 
        
        self.gamescope_checkbox.setEnabled(is_gamescope_allowed)
        self.gamescope_group.setEnabled(is_gamescope_allowed)
        
        if not is_gamescope_allowed:
            self.gamescope_checkbox.setChecked(False)
            
        self.update_command_preview()
        
    def toggle_gamescope_config(self):
        """切换 Gamescope 配置区域的显示/隐藏"""
        is_visible = self.gs_config_widget.isVisible()
        self.gs_config_widget.setVisible(not is_visible)
        
        if is_visible:
            self.gs_collapse_btn.setText("▼ 展开配置")
        else:
            self.gs_collapse_btn.setText("▲ 收起配置")

    # --- 配置保存/加载 ---
    def save_config(self):
        """将当前 UI 状态保存为 JSON 文件"""
        config_data = {
            "proton_combo": self.proton_combo.currentText(),
            "custom_proton_path_input": self.custom_proton_path_input.text(),
            "wine_pfx_checked": self.wine_pfx_checkbox.isChecked(), 
            
            "gameid_input": self.gameid_input.text(),
            "store_input": self.store_input.text(),
            "pf_tricks_input": self.pf_tricks_input.text(), # 新增保存
            
            "env_input": self.env_input.text(),
            "args_input": self.args_input.text(),
            
            "mangohud_checked": self.mangohud_checkbox.isChecked(),
            "gamemode_checked": self.gamemode_checkbox.isChecked(),
            "winedll_checked": self.winedll_checkbox.isChecked(),
            
            "proton_hdr_checked": self.proton_hdr_checkbox.isChecked(),
            "proton_wayland_checked": self.proton_wayland_checkbox.isChecked(),
            "proton_verb_checked": self.proton_verb_checkbox.isChecked(), # 新增保存
            
            "gamescope_checked": self.gamescope_checkbox.isChecked(),
            "w_input": self.w_input.text(),
            "h_input": self.h_input.text(),
            "W_input": self.W_input.text(),
            "H_input": self.H_input.text(),
            "fsr_checked": self.fsr_checkbox.isChecked(),
            
            "proton_fsr_checked": self.proton_fsr_checkbox.isChecked(),
            "fsr_sharpness_input": self.fsr_sharpness_input.text(),
            
            "proton_fake_res_checked": self.proton_fake_res_checkbox.isChecked(),
            "fake_w_input": self.fake_w_input.text(),
            "fake_h_input": self.fake_h_input.text(),
        }
        
        try:
            os.makedirs(os.path.dirname(self.config_path), exist_ok=True)
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=4)
        except Exception as e:
            QMessageBox.warning(self, "保存失败", f"无法保存配置到 {self.config_path}: {e}")

    def load_config(self):
        """从 JSON 文件加载配置并设置 UI 状态"""
        # 设置默认值
        self.gameid_input.setText("0") # GAMEID 默认值 0
        
        if not os.path.exists(self.config_path):
            return

        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            # 恢复 ComboBox 和自定义路径
            if "proton_combo" in config_data and config_data["proton_combo"] in PROTON_PATHS:
                self.proton_combo.setCurrentText(config_data["proton_combo"])
            self.custom_proton_path_input.setText(config_data.get("custom_proton_path_input", ""))

            # 恢复 WINEPREFIX 选择
            self.wine_pfx_checkbox.setChecked(config_data.get("wine_pfx_checked", False))
            
            # 恢复 Umu 专用参数 (GAMEID 使用默认值，除非配置文件中有)
            self.gameid_input.setText(config_data.get("gameid_input", "0"))
            self.store_input.setText(config_data.get("store_input", ""))
            self.pf_tricks_input.setText(config_data.get("pf_tricks_input", "")) # 恢复 pf_tricks

            # 恢复 CheckBoxes
            self.mangohud_checkbox.setChecked(config_data.get("mangohud_checked", True))
            self.gamemode_checkbox.setChecked(config_data.get("gamemode_checked", False))
            self.winedll_checkbox.setChecked(config_data.get("winedll_checked", False))
            self.proton_hdr_checkbox.setChecked(config_data.get("proton_hdr_checked", False))
            self.proton_wayland_checkbox.setChecked(config_data.get("proton_wayland_checked", False))
            self.proton_verb_checkbox.setChecked(config_data.get("proton_verb_checked", False)) # 恢复 PROTON_VERB
            
            # Gamescope 配置
            self.gamescope_checkbox.setChecked(config_data.get("gamescope_checked", False))
            self.fsr_checkbox.setChecked(config_data.get("fsr_checked", False))
            
            # Proton FSR 配置
            self.proton_fsr_checkbox.setChecked(config_data.get("proton_fsr_checked", False))
            self.proton_fake_res_checkbox.setChecked(config_data.get("proton_fake_res_checked", False))

            # 恢复 LineEdits
            self.env_input.setText(config_data.get("env_input", ""))
            self.args_input.setText(config_data.get("args_input", ""))
            self.w_input.setText(config_data.get("w_input", "1920"))
            self.h_input.setText(config_data.get("h_input", "1080"))
            self.W_input.setText(config_data.get("W_input", "3840")) 
            self.H_input.setText(config_data.get("H_input", "2160")) 
            self.fsr_sharpness_input.setText(config_data.get("fsr_sharpness_input", "2"))
            self.fake_w_input.setText(config_data.get("fake_w_input", "2560"))
            self.fake_h_input.setText(config_data.get("fake_h_input", "1440"))

        except Exception as e:
            QMessageBox.warning(self, "加载失败", f"无法加载配置: {e}")

    def get_command_details(self):
        """获取并返回启动命令的所有组件和配置"""
        
        # --- 1. PROTONPATH 和 WINEPREFIX (与 V2 相同) ---
        selected_proton = self.proton_combo.currentText()
        proton_path = self.custom_proton_path_input.text().strip() if selected_proton == "自定义" else PROTON_PATHS[selected_proton].strip()
            
        wine_prefix_path = os.path.join(self.game_dir, CONFIG_DIR_NAME, LOCAL_PFX_DIR_NAME) if self.wine_pfx_checkbox.isChecked() else DEFAULT_GLOBAL_PFX
        
        # --- 2. 环境变量 (Umu/Proton/额外) ---
        env_vars_list = []
        
        # Umu 专用环境变量 (GAMEID, STORE)
        game_id = self.gameid_input.text().strip()
        if game_id:
            env_vars_list.append(f"GAMEID={game_id}")
        store = self.store_input.text().strip()
        if store:
            env_vars_list.append(f"STORE={store}")
            
        # PROTON_VERB=runinprefix
        if self.proton_verb_checkbox.isChecked():
            env_vars_list.append("PROTON_VERB=runinprefix")
        
        # 额外环境变量 (ENV)
        env_vars_list.extend([v for v in self.env_input.text().strip().split() if v]) 
        
        is_gamescope_enabled = self.gamescope_checkbox.isChecked()
        is_mangohud_requested = self.mangohud_checkbox.isChecked()

        # 检查并添加通用和 Proton 环境变量
        if self.winedll_checkbox.isChecked():
            env_vars_list.append('WINEDLLOVERRIDES="winhttp=n,b"')
        if self.proton_wayland_checkbox.isChecked() and all(not v.upper().startswith("PROTON_ENABLE_WAYLAND=") for v in env_vars_list):
            env_vars_list.append("PROTON_ENABLE_WAYLAND=1")
        if self.proton_hdr_checkbox.isChecked() and all(not v.upper().startswith("PROTON_ENABLE_HDR=") for v in env_vars_list):
            env_vars_list.append("PROTON_ENABLE_HDR=1")

        if not is_gamescope_enabled:
            # FSR 和伪分辨率
            if self.proton_fsr_checkbox.isChecked():
                env_vars_list.append("WINE_FULLSCREEN_FSR=1")
                sharpness = self.fsr_sharpness_input.text().strip()
                if sharpness:
                    env_vars_list.append(f"WINE_FULLSCREEN_FSR_STRENGTH={sharpness}")
            
            if self.proton_fake_res_checkbox.isChecked():
                fake_w = self.fake_w_input.text().strip()
                fake_h = self.fake_h_input.text().strip()
                if fake_w and fake_h:
                    env_vars_list.append(f"WINE_FULLSCREEN_FSR_CUSTOM_MODE={fake_w}x{fake_h}")
                    
            # MangoHud 独立设置
            if is_mangohud_requested:
                if all(not v.upper().startswith("MANGOHUD=") for v in env_vars_list):
                    env_vars_list.insert(0, "MANGOHUD=1")
        
        # 整理环境变量字符串
        env_vars = " ".join(env_vars_list).strip()

        # --- 3. 前置启动器/包装器 (PREFIX CMD) ---
        prefix_cmd_list = []
        if self.gamemode_checkbox.isChecked():
            prefix_cmd_list.append("gamemoderun")
        
        # Gamescope 启动器
        if is_gamescope_enabled:
            gs_cmd_list = ["gamescope", "-f"] 
            
            gs_cmd_list.extend(["-w", self.w_input.text().strip()])
            gs_cmd_list.extend(["-h", self.h_input.text().strip()])
            gs_cmd_list.extend(["-W", self.W_input.text().strip()])
            gs_cmd_list.extend(["-H", self.H_input.text().strip()])
            
            if self.fsr_checkbox.isChecked():
                gs_cmd_list.extend(["-F", "fsr"])
            
            if is_mangohud_requested:
                gs_cmd_list.append("--mangoapp")
            
            prefix_cmd_list.append(" ".join(gs_cmd_list))
            
            # Gamescope 启用时，移除用户可能手动输入的 MANGOHUD=1
            env_vars = " ".join([v for v in env_vars_list if not v.upper().startswith("MANGOHUD=")]).strip()

        # --- 4. Umu 内部参数 (-pf_tricks) ---
        # 调整：将 -pf_tricks 作为一个单独的列表返回，以便将其放在命令的最后
        extra_args_list = []
        pf_tricks_raw = self.pf_tricks_input.text().strip()
        if pf_tricks_raw:
            tricks = [t.strip() for t in pf_tricks_raw.split(',') if t.strip()]
            for trick in tricks:
                 # 注意：这里我们只收集参数，不加 umu-run 的引号
                extra_args_list.append(f"-pf_tricks={trick}") 
        
        # 5. 整理游戏参数 (放置在 .exe 后面，但在 -pf_tricks 前面)
        args = self.args_input.text().strip()

        # 返回值调整：移除 umu_internal_args_str，新增 extra_args_list
        return proton_path, wine_prefix_path, env_vars, args, prefix_cmd_list, extra_args_list

    def update_command_preview(self):
        """更新底部的命令预览文本"""
        # 接收调整后的返回值
        proton_path, wine_prefix, env_vars, args, prefix_cmd_list, extra_args_list = self.get_command_details()
        
        display_cmd = []
        
        # 1. 环境变量
        if env_vars:
            display_cmd.append(env_vars)
        
        # 2. WINEPREFIX / PROTONPATH
        if wine_prefix:
            display_cmd.append(f"WINEPREFIX='{wine_prefix}'")
        if proton_path:
            display_cmd.append(f"PROTONPATH='{proton_path}'")
        
        # 3. 前置命令 (gamemoderun, gamescope)
        if prefix_cmd_list:
            display_cmd.extend(prefix_cmd_list)
        
        # 4. UMU-RUN 命令
        display_cmd.append("umu-run")
        
        # 5. EXE 路径 (用于显示)
        exe_display = f"'{os.path.basename(self.exe_path)}'" 
        display_cmd.append(exe_display)

        # 6. 游戏参数
        if args:
            display_cmd.append(args)

        # 7. Umu 内部参数 (-pf_tricks) - 调整到最后
        if extra_args_list:
            display_cmd.extend(extra_args_list)

        preview_text = f"最终运行命令: {' '.join(display_cmd).strip()}"
        self.preview_label.setText(preview_text)


    def launch_game(self):
        """执行游戏启动逻辑，通过 foot 终端运行"""
        # 1. 保存配置
        self.save_config()
        
        # 接收调整后的返回值
        proton_path, wine_prefix, env_vars, args, prefix_cmd_list, extra_args_list = self.get_command_details()

        # 2. 构造 umu 内部命令
        exe_quoted = f"'{self.exe_path}'"
        
        # 内部命令格式：umu-run <exe_path> <args> <extra_args_list>
        main_command_parts = ["umu-run", exe_quoted]
        if args:
            main_command_parts.append(args)
        if extra_args_list: # 将 -pf_tricks 放在最后
            main_command_parts.extend(extra_args_list)
            
        main_command = " ".join(main_command_parts)
            
        # 3. 构造前置命令
        if prefix_cmd_list:
            final_run_cmd = f"{' '.join(prefix_cmd_list)} {main_command}"
        else:
            final_run_cmd = main_command

        # 4. 构造环境变量字符串 (WINEPREFIX, PROTONPATH, 额外 ENV)
        env_string_list = []
        if wine_prefix:
            env_string_list.append(f"WINEPREFIX='{wine_prefix}'")
        if proton_path:
            env_string_list.append(f"PROTONPATH='{proton_path}'")
        if env_vars:
            env_string_list.append(env_vars)
            
        env_string = " ".join(env_string_list)
        
        # 5. 最终在 foot 中执行的完整 bash 命令
        full_command_in_foot = f"{env_string} {final_run_cmd}".strip()
        bash_command = full_command_in_foot 
        
        # 6. 构造 foot 启动命令
        foot_cmd = [
            "foot", 
            "-T", f"日志: {os.path.basename(self.exe_path)}",
            "-e", "bash", "-c",
            bash_command + " && echo '命令执行完毕，按任意键退出...' && read" 
        ]
        
        try:
            subprocess.Popen(foot_cmd)
            QTimer.singleShot(100, self.close) 
        except FileNotFoundError as e:
            missing_cmd = str(e).split("'")[1] if "'" in str(e) else "foot/umu-run/gamescope 等"
            QMessageBox.critical(self, "错误", f"找不到必要的命令：'{missing_cmd}'。请检查 PATH。")
        except Exception as e:
            QMessageBox.critical(self, "启动失败", f"启动过程中发生错误: {e}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("错误: 缺少可执行文件路径参数。请通过桌面集成启动。")
        sys.exit(1)
    
    app = QApplication(sys.argv)
    exe_file_path = os.path.abspath(sys.argv[1])
    
    if not os.path.exists(exe_file_path):
        QMessageBox.critical(None, "错误", f"找不到文件: {exe_file_path}")
        sys.exit(1)
        
    os.chdir(os.path.dirname(exe_file_path))

    window = CustomLauncher(exe_file_path)
    window.show()
    sys.exit(app.exec())
